{"ast":null,"code":"// КОНСТАНТЫ ДЛЯ ЭКШН-КРИЭЙТОРОВ\nconst GET_ALL_USERS = 'GET_ALL_USERS'; // state - любая сущность (массив, число, строка, объект), кроме функции\n// action - объект, у которого должно быть поле type\n\nlet initialState = [{\n  id: 1,\n  name: 'Egor',\n  age: 33\n}, {\n  id: 2,\n  name: 'Pavel',\n  age: 20\n}, {\n  id: 3,\n  name: 'Dima',\n  age: 40\n}, {\n  id: 4,\n  name: 'Vova',\n  age: 30\n}, {\n  id: 5,\n  name: 'Oleg',\n  age: 89\n}];\nexport const userReducer = (state, action) => {\n  switch (action.type) {\n    case GET_ALL_USERS:\n      {\n        return [...state]; // Всегда возвращаем копию, чтобы не было мутабельности\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // actionCreator - функция, которая возвращает объект типа action\n\nexport const GET_ALL_USERS_AC = () => {\n  return {\n    type: GET_ALL_USERS\n  };\n}; // export const GET_ALL_USERS_AC = () => ( {type: GET_ALL_USERS} ) // второй способ записи actionCreator\n\n_c = GET_ALL_USERS_AC;\n\nvar _c;\n\n$RefreshReg$(_c, \"GET_ALL_USERS_AC\");","map":{"version":3,"sources":["/Users/admin/Downloads/redux_lesson/my-app/src/redux/userReducer.ts"],"names":["GET_ALL_USERS","initialState","id","name","age","userReducer","state","action","type","GET_ALL_USERS_AC"],"mappings":"AAAA;AACA,MAAMA,aAAa,GAAG,eAAtB,C,CAEA;AACA;;AASA,IAAIC,YAAY,GAAG,CACf;AAACC,EAAAA,EAAE,EAAE,CAAL;AAAQC,EAAAA,IAAI,EAAE,MAAd;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CADe,EAEf;AAACF,EAAAA,EAAE,EAAE,CAAL;AAAQC,EAAAA,IAAI,EAAE,OAAd;AAAuBC,EAAAA,GAAG,EAAE;AAA5B,CAFe,EAGf;AAACF,EAAAA,EAAE,EAAE,CAAL;AAAQC,EAAAA,IAAI,EAAE,MAAd;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CAHe,EAIf;AAACF,EAAAA,EAAE,EAAE,CAAL;AAAQC,EAAAA,IAAI,EAAE,MAAd;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CAJe,EAKf;AAACF,EAAAA,EAAE,EAAE,CAAL;AAAQC,EAAAA,IAAI,EAAE,MAAd;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CALe,CAAnB;AAQA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAA0BC,MAA1B,KAAmE;AAC1F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,aAAL;AAAoB;AAChB,eAAO,CAAC,GAAGM,KAAJ,CAAP,CADgB,CACE;AACrB;;AACD;AAAS;AACL,eAAOA,KAAP;AACH;AANL;AAQH,CATM,C,CAWP;;AACA,OAAO,MAAMG,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHD,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJM,C,CAKP;;KALaS,gB","sourcesContent":["// КОНСТАНТЫ ДЛЯ ЭКШН-КРИЭЙТОРОВ\nconst GET_ALL_USERS = 'GET_ALL_USERS'\n\n// state - любая сущность (массив, число, строка, объект), кроме функции\n// action - объект, у которого должно быть поле type\n\ntype initialStateType = typeof initialState // типизируем state\ntype GET_ALL_USERS = {\n    type: typeof GET_ALL_USERS\n}\n\ntype actionType = GET_ALL_USERS\n\nlet initialState = [\n    {id: 1, name: 'Egor', age: 33},\n    {id: 2, name: 'Pavel', age: 20},\n    {id: 3, name: 'Dima', age: 40},\n    {id: 4, name: 'Vova', age: 30},\n    {id: 5, name: 'Oleg', age: 89},\n]\n\nexport const userReducer = (state: initialStateType, action: actionType): initialStateType => {\n    switch (action.type) {\n        case GET_ALL_USERS: {\n            return [...state] // Всегда возвращаем копию, чтобы не было мутабельности\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n// actionCreator - функция, которая возвращает объект типа action\nexport const GET_ALL_USERS_AC = () => {\n    return {\n        type: GET_ALL_USERS\n    }\n}\n// export const GET_ALL_USERS_AC = () => ( {type: GET_ALL_USERS} ) // второй способ записи actionCreator\n"]},"metadata":{},"sourceType":"module"}